// Globals and defaults
var settings = null;
var settingsFile = System.home("PD2Launcher.json");
var defaultSettings = {
	options: {
		playmode: "online",
		graphics: "3dfx",
		skiptobnet: true,
		sndbkg: false,
		ddrawmode: "borderless",
	},
	lootfilters: {
	},
};

// UI elements, 
var modalBackground = $(#modal-background);
var optionsModal = $(#options-modal);
var lootFilterModal = $(#loot-filter-modal);
var playButton = $(#play-button);
var optionsForm = $(#options-form);

var lootFilterAuthors = $(#lootfilter-authors);
var lootFilterList = $(#lootfilter-list);
var lootFilterListHeader = $(#lootfilter-header);
var savedLootFilterListLabel = $(#saved);

var lootfilterListDictionary = {};
var selectedLootFilter = {};
var selectedLootFilterAuthor = "";
var lootFilterLoaded = false;

var jsonFilters = null;
var ddrawOptions = null;

// Form startup
self.ready = function() {
	// connect to debugger
	if (view.connectToInspector)
		view.connectToInspector();

	// positioning the window in the middle of the screen:
	var (sx,sy,sw,sh) = view.screenBox(#workarea,#rectw); // getting screen/monitor size
	var (w, h) = (self.toPixels(750dip), self.toPixels(550dip));

	view.move(sx + (sw - w) / 2, sy + (sh - h) / 2, w, h);

	// Load saved options	
	loadSettingsFile();
	loadDdrawSettingsFile();
	setLoadedSettings();
}

// Open and load setings from ddraw.ini
function loadDdrawSettingsFile() {
	ddrawOptions = view.frame.getDdrawOptions();
	settings.options = Object.assign({}, settings.options, ddrawOptions);
}

// Open and load launcher settings
function loadSettingsFile() {
	try {
		// Read and parse launcher options settings file
		var jsonData;
		var file = Stream.openFile(settingsFile, "r");
		if (file instanceof Stream) {
			jsonData = parseData(file);
			file.close();
		}

		// Check to make sure we got a proper object with settings
		if (typeof jsonData == "object") {
			if ("options" in jsonData && "lootfilters" in jsonData) {
				settings = jsonData;
			}
		}

		// Keep the loaded settings or fallback to the defaults
		settings = settings || defaultSettings;
	} catch (e) {
		view.msgbox(#alert, "Failed to load settings. Your options/loot filters will not save. \nThis is normally a permissions issue and running as admin once typically fixes it.", "Settings failed to load.");
	}
}

// Set the options 
function setLoadedSettings() {
	// Need to convert false values from checkboxes to undefined
	var s = settings.options;
	for (var o in s) {		
		if (s[o] === false || s[o] === "false") {
			s[o] = undefined;
		}
	}

	// Set the initial values for the form, reset and send event to update the input values
	optionsForm.value = s;
	optionsForm.reset();
	optionsForm.sendEvent("change");
}

// Write launcher options to json file
function writeSettingsFile() {
	// Remove ddraw options from launcher settings
	var s = settings;
	for (var k in ddrawOptions) {
		if (k in s.options)
			delete s.options[k];
	}

	try {
		var file = Stream.openFile(settingsFile, "w");
		file << JSON.stringify(s, null, 4) + "\n";
		file.close();
	}
	catch (e) {
		//view.msgbox(#alert, e);
		view.msgbox(#alert, "Failed to save settings. Your options/loot filters will not save. \nThis is normally a permissions issue and running as admin once typically fixes it.", "Settings failed to save.");
	}
}

// Write ddraw settings to ddraw.ini
function writeDdrawOptionsToIni() {
	view.frame.setDdrawOptions(settings.options);
}

// Hide or show playmode notes on the option screen depending on selected setting
function displayPlaymodeNotes() {
	var online = (settings.options.playmode == "online");
	var plugy = (settings.options.playmode == "plugy")
	var plugymodded = (settings.options.playmode == "plugymodded");

	$(#playmode-online-note).style.set({ display: (online ? "block" : "none") });
	$(#playmode-plugy-note).style.set({ display: (plugy ? "block" : "none") });
	$(#playmode-plugymodded-note).style.set({ display: (plugymodded ? "block" : "none") });
}

// Hide or show graphic mode notes on the option screen depending on selected setting
function displayGraphicsNotes() {
	var ddraw = (settings.graphics == "ddraw");

	$(#3dfx-note).style.set({ display: (ddraw ? "none" : "block") });
	$(#ddraw-note).style.set({ display: (ddraw ? "block" : "none") });	
}

// Update ddraw settings based on the selected mode
function setDdrawmodeOptions() {
	switch (settings.options.ddrawmode) {
		case "fullscreen":
			settings.options.fullscreen = true;
			settings.options.windowed = false;
			break;

		case "borderless":
			settings.options.fullscreen = true;
			settings.options.windowed = true;
			break;

		case "windowed":
			settings.options.fullscreen = false;
			settings.options.windowed = true;
			break;

		default:
	}

	// Hide or show windowed mode settings if selected
	$(#resolution).style.set { display: (settings.options.ddrawmode == "windowed") ? "block" : "none" };
}

// Hide or show ddraw options if selected
function displayDdrawModeOptions() {
	$(#ddraw-options-container).style.set({ display: (settings.options.graphics == "ddraw" ? "block" : "none") });
}

// Close options screens and save settings
function closeModals() {
	// Write launcher and ddraw settings to files
	writeDdrawOptionsToIni();
	writeSettingsFile();

	modalBackground.attributes.removeClass("is-visible");
	lootFilterLoaded = false;	

	var modals = $$(.modal);
	for (var modal in modals) {
		modal.attributes.removeClass("is-visible");
	}
}

// Fetch online loot filters
function getLootFilterJsonList() {
	// If the list has not been retrieved yet, fetch it using an HTTP request.
	if (jsonFilters == null) {
		jsonFilters = [];
		view.request({
			url: "https://raw.githubusercontent.com/Project-Diablo-2/LootFilters/main/filters.json",
			protocol: #basic,
			output: #json,
			noCache: false,
			success: function(data, status) {
				// Add a "local" loot filter option to the beginning of the list.
				jsonFilters.push({"author":"local", "url":"", "name":"local"});

				// Add each loot filter to the list.
				for (var d in data ) {
					jsonFilters.push(d);
				}

				// Open the modal window that displays the loot filter options.	
				openLootFiltersModal();
			},
			error:function(err, status) {
			}
		});
	} else {
		// If the list has already been retrieved, just open the modal window that displays the loot filter options.
		openLootFiltersModal();
	}
}

// Open loot filters screen
function openLootFiltersModal() {
	loadLootFilterAuthors();
	modalBackground.attributes.addClass("is-visible");
	lootFilterModal.attributes.addClass("is-visible");
}

// Clears the current list of loot filter authors and generates a new list
// based on the jsonFilters object. Also handles button clicks for selecting
// a loot filter author and highlighting the selected author.
function loadLootFilterAuthors() {
	// Clear the current list of loot filter authors.
	lootFilterAuthors.clear();

	// Check if there are any loot filters available.
	if (jsonFilters != null) {

		for(var item in jsonFilters) {
			// Add a new button to the list of loot filter authors.
			lootFilterAuthors.$append(
				<div id="{item.author}btn" class="author-button">
					<span id="{item.author}btntext">{item.author}</span>
				</div>
			);

			// Add a click event listener to the author button text
			$(#{item.author}btntext).on("click", function(evt, btn) {
				btn.parent.postEvent("click");
			});

			// Add a click event listener to the author button to select the
			// loot filter author and highlight the selected author.
			$(#{item.author}btn).on("click", function(evt, btn) {
				var buttons = $$(.author-button);
				for (var button in buttons) {
					button.attributes.removeClass("author-button-selected");
				}
				
				// select the corresponding loot filter author.
				btn.attributes.addClass("author-button-selected");
				selectLootFilterAuthor(btn.id.substr(0, btn.id.length - 3));
			});

			// If a loot filter is already selected in the storage, simulate a
			// click on the corresponding author button to highlight it.
			if (!lootFilterLoaded) {
				if (item.author == settings.lootfilters["selectedAuthor"]) {
					$(#{item.author}btn).postEvent("click");
				}
			}
		}
	}
}

// Selects a loot filter author and retrieves their list of filters
// author: the name of the author to select
function selectLootFilterAuthor(author) {
	
	// Clear existing loot filter data
	selectedLootFilterAuthor = null;
	lootFilterList.clear();
	lootFilterListHeader.clear();

	// If an author is selected
	if (author != null && author != "") {
		// Get author object
		for(var item in jsonFilters) {
			if (item.author == author) {
				selectedLootFilterAuthor = item;
				break;
			}
		}
		
		// If the author is local
		if (author.toLowerCase() == "local" && author.toLowerCase != "localbtnt") {
			var localFiles = view.frame.getLocalFiles();
			var filters = [];
			for (var item in localFiles) {
				var f = item + "";
				if (f.indexOf(".filter") != -1) {
					filters.push({
						"name": f,
						"url": System.home("filters/local/") + f,
						"download_url": System.home("filters/local/") + f
					});
				}
			}
			
			// Cache and show the filters
			lootfilterListDictionary[author] = filters;
			onLootFilterAuthorLoadComplete(selectedLootFilterAuthor, filters);
		} else {
			if (lootfilterListDictionary[author] == null) {
				// If the author has not been loaded before, look up their Git repository Lookup author git repo
				if (selectedLootFilterAuthor != null && selectedLootFilterAuthor.url != null) {
					view.request({
					url: selectedLootFilterAuthor.url,
					protocol: #basic,
					output: #json,
					noCache: false,
					success: function(data, status) {
						var filters = [];
						for (var item in data) {
							if (item.name.indexOf(".filter") != -1) {
								filters.push(item);
							}
						}

						// Cache loaded loot filters to save data to github
						lootfilterListDictionary[author] = filters;
						// We have now loaded the loot filters, show them!
						onLootFilterAuthorLoadComplete(selectedLootFilterAuthor, filters);
					},
					error:function(err, status) {
					}
				});
				}
			} else {
				// // If the author has been loaded before, use the cached data
				onLootFilterAuthorLoadComplete(selectedLootFilterAuthor, lootfilterListDictionary[author]);
			}
		}
	}
}

// Handles the completion of loading loot filters for a selected author
function onLootFilterAuthorLoadComplete(author, filters) {
	var url = "https://github.com/Project-Diablo-2/LootFilters";
	if (author.url) {
		var repoStart = author.url.indexOf("/repos/") + 7;
		var repo = author.url.substr(repoStart);
		var reposEnd = repo.indexOf("/contents");
		repo = repo.substr(0, reposEnd);
		url = "https://github.com/" + repo;
	}

	lootFilterListHeader.$append(
		<div>
			<a href="{url}">&#128712; - {author.name}</a>
		</div>
	);

	if (filters != null) {
		for(var item in filters) {
			var name = item.name.substr(0, item.name.indexOf(".filter"));
			lootFilterList.$append(
				<div id="{name}btn" class="lootfilter-button">
					<span id="{name}btntext">{item.name}</span>
				</div>
			);

			$(#{name}btntext).on("click", function(evt, btn) {
				btn.parent.postEvent("click");
			});

			$(#{name}btn).on("click", function(evt, btn) {
				var buttons = $$(.lootfilter-button);
				for (var button in buttons) {
					button.attributes.removeClass("lootfilter-button-selected");
				}

				for (var f in lootfilterListDictionary[selectedLootFilterAuthor.author]) {
					var filterName = f.name.substr(0, f.name.indexOf(".filter"));
					if (filterName == btn.id.substr(0, btn.id.length - 3)) {
						selectedLootFilter = f;
					}
				}
						
				btn.attributes.addClass("lootfilter-button-selected");
				settings.lootfilters["selectedAuthor"] = selectedLootFilterAuthor.author;
				settings.lootfilters["selectedFilter"] = selectedLootFilter.name;
				settings.lootfilters["filterDownloadUrl"] = selectedLootFilter.download_url;
				settings.lootfilters["filterUrl"] = selectedLootFilter.url;

				savedLootFilterListLabel.clear();

				if (lootFilterLoaded == true) {
					savedLootFilterListLabel.$append(
						<span>Config Saved</span>
					);
				}

				savedLootFilterListLabel.timer(1000, function() {
					savedLootFilterListLabel.clear();
					return false;
				});
			});

			if (!lootFilterLoaded) {
				if (item.name == settings.lootfilters["selectedFilter"]) {
					$(#{name}btn).postEvent("click");
				}
			}
		}

		lootFilterLoaded = true;
	}
}

// Returns a string of command-line arguments based on the state of the launcher options
function getLaunchArguments() {
	var args = [];

	if (settings.options.graphics === '3dfx') {
		args.push('-3dfx');
	}

	switch (settings.options.playmode) {
		case 'plugymodded':
			args.push('-direct');
			args.push('-txt');

		case 'plugy':
			if (settings.options.sndbkg)
				args.push('-sndbkg');
			break;
			
		case 'online':
			if (settings.options.skiptobnet)
				args.push('-skiptobnet');

			if (settings.options.sndbkg)
				args.push('-sndbkg');
			
			break;
	}

	return args.join(" ");
}

// Helper functions ------------------------------------
function msg(data) {
	view.msgbox(#information, data);
}

function msgj(data) {
	msg(JSON.stringify(data, null, 4));
}
// -----------------------------------------------------


// Events ----------------------------------------------
// Handle ESC key to close
event keydown(e) {
	if (e.keyCode == Event.VK_ESCAPE) {
		if (modalBackground.attributes.hasClass("is-visible")) {
			closeModals();
		} else {
			view.close();
		}
	}
}

// Used by main program to update the state of the play button
self.finish_update = function () {
	delete playButton.attributes["disabled"];
	playButton.attributes.removeClass("disabled");
}

// Handle clicking url links
event click $(a[href ^= http]) {
	Sciter.launch(this.attributes["href"]);
	return true;
};

// Play button
event click $(#play-button) {
	//play button animation
	playButton.attributes["disabled"] = true;
	playButton.attributes.addClass("disabled");

	// get lootfilter from storage
	var filterOptions = settings.lootfilters;

	//set lootfilter to storage
	view.frame.setLootFilter(
		filterOptions["selectedAuthor"],
		filterOptions["selectedFilter"],
		filterOptions["filterDownloadUrl"],
		filterOptions["filterUrl"]
	);

	var args = getLaunchArguments();

	switch (settings.options.playmode) {
		case "plugy":
		case "plugymodded":
			view.frame.playPlugy(args)
			break;

		case "online":
		default:
			view.frame.play(args);
	}
}

// Main function to run exceptions powershell script
event click $(#set-windows-sec-button) {
	view.frame.setPD2WindowsSettings();
}

// Main function to run exceptions powershell script
event click $(#rem-windows-sec-button) {
	view.frame.remPD2WindowsSettings();
}

// Open plugy configuration
event click $(#edit-plugyini-button) {
	Sciter.launch("plugy.ini");
}

// Show options screen
event click $(#options-button) {
	modalBackground.attributes.addClass("is-visible");
	optionsModal.attributes.addClass("is-visible");
}

// Download loot filters and open loot filters screen
event click $(#loot-filters-button) {
	getLootFilterJsonList();
}

// Close options screens when clicking outside of it
event click $(#modal-background) {
	closeModals();
}

// Handle close buttons on option screens
event click $(.modal-close) {
	closeModals();
}

// Handle input changes on the options screen
event change $(form) {
	// Convert form values so they are valid JSON types
	var s = this.value;
	for (var o in s) {
		if (s[o] === undefined || s[o] === "false")
			s[o] = false;

		if (s[o] === "true")
			s[o] = true;
	}
	settings.options = s;

	// Update some conditional settings and UI elements
	setDdrawmodeOptions();
	displayPlaymodeNotes();
	displayGraphicsNotes();
	displayDdrawModeOptions();
}
// -----------------------------------------------------